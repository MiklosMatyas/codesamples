<?php

use Drupal\Component\Utility\SafeMarkup;
use Drupal\Core\Url;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\node\Entity\Node;
use Drupal\Core\Form\FormStateInterface;
use Drupal\system\Entity\Menu;
use Drupal\Core\Render\Markup;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\statistics\StatisticsViewsResult;

function mnet_extra_template_preprocess_default_variables_alter(&$variables) {
  $default_country_code = \Drupal::config('system.date')->get('country');
  $countries = \Drupal\Core\Locale\CountryManager::getStandardList();
  foreach ($countries as $key => $value) {
   $countries[$key] = $value->__toString();
  }
  $variables['default_country'] = $countries[$default_country_code['default']];
}

/**
* Implements hook_preprocess_node() for node.html.twig.
*/
function mnet_extra_preprocess_node(&$variables) {
  switch ($variables['node']->getType()) {
    case "deal":
      $node = $variables["node"];
      if ($node instanceof \Drupal\node\NodeInterface) {
        $startsends = $node->field_starts_ends->value;
        $timestamp = strtotime($startsends);
        $in_time = \Drupal::service('date.formatter')->formatInterval($timestamp - REQUEST_TIME, 1);
        $status = "";
        $status_raw = "";
        $status_upcoming = "";
        $variables['status_raw'] = [];

        if($node->field_expired->value == "0"){
          $status = "Active";
          $status_raw = "Active";
        }
        if($node->field_expired->value == "1"){
          $status = '<span class="expired">Expired</span>';
          $status_raw = "Expired";
        }
        if($in_time != "0 sec"){
          $status = '<span class="upcoming">in ' . $in_time . '</span>';
          $status_raw = 'in ' . $in_time;
          $status_upcoming = 'Upcoming';
        }

        $variables['status'] = ['#markup' => $status];
        $variables['status_raw'] = ['#markup' => $status_raw];
        $variables['status_upcoming'] = ['#markup' => $status_upcoming];

        try {
          $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
        }
        catch (Exception $e) {
          $variables['is_front'] = FALSE;
        }

        /**
        * Flag links
        */
        $flag_link_service = \Drupal::service('flag.link_builder');
        $flag_like = $flag_link_service->build($node->getEntityTypeId(), $node->id(), 'like');
        $variables['deal_flag_like'] = $flag_like;
        $flag_save = $flag_link_service->build($node->getEntityTypeId(), $node->id(), 'save');
        $variables['deal_flag_save'] = $flag_save;

        // Get statistics count for current node.
        $statistics = \Drupal::service('statistics.storage.node')->fetchView($node->id());
        if ($statistics instanceof StatisticsViewsResult ) {
          $variables['node_view_count'] = $statistics->getTotalCount();
        }

      }
    break;

    case "event":
      $node = $variables["node"];
      if ($node instanceof \Drupal\node\NodeInterface) {
        $startsends = $node->field_starts_ends->value;
        $timestamp = strtotime($startsends);
        $in_time = \Drupal::service('date.formatter')->formatInterval($timestamp - REQUEST_TIME);
        $status = "";
        $status_raw = "";
        $status_upcoming = "";
        $variables['status_raw'] = [];

        if($in_time != "0 sec"){
          $status = '<span class="upcoming">in ' . $in_time . '</span>';
          $status_raw = 'in ' . $in_time;
          $status_upcoming = 'Upcoming';
        }

        $variables['status'] = ['#markup' => $status];
        $variables['status_raw'] = ['#markup' => $status_raw];
        $variables['status_upcoming'] = ['#markup' => $status_upcoming];

      }
    break;

    case "store":
      // ...
    break;
  }

  // Get statistics count for current node.
  /** @var \Drupal\statistics\StatisticsViewsResult $statistics */
  $statistics = \Drupal::service('statistics.storage.node')->fetchView($variables['node']->id());
  if ($statistics !== FALSE) {
    $variables['node_stats'] = numToKs($statistics->getTotalCount());
  }

}

/**
 * Implements hook_views_pre_render().
 */
function mnet_extra_views_pre_render(\Drupal\views\ViewExecutable $view) {

  // Degrease banner weight by 100.
  if ($view->id() == 'banners' || ($view->id() == 'stores' && ($view->current_display == 'featured' || $view->current_display == 'front_stores'))) {
    foreach ($view->result as $i => $row) {
      $b1 = [20,10,10];
      $b2 = [10,5,5];
      if($view->current_display == 'block_1'){
        $de = $b1[$i];
      }
      if($view->current_display == 'block_2'){
        $de = $b2[$i];
      }
      if($view->current_display == 'featured' || $view->current_display == 'front_stores'){
        $de = 10;
      }

      $nid = $row->_entity->get('nid')->value;
      $node = Node::load($nid);
      $weight = $node->field_weight->value;
      $node->set('field_weight', $weight - $de);
      $node->save();
    }
  }


}

/*
function mnet_extra_preprocess(&$variables, $hook){
  vardumper("mnet_preprocess");
  vardumper($hook);

}
*/


/**
 * Implements hook_views_query_alter().
 */
function mnet_extra_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {

  // Set date conditions for Events page_2 view.
      /*
  if ($view->storage->get('id') === 'events' && $view->current_display === 'page_2') {
    if (isset($query->where[0])) {
      if (trim($query->where[0]['conditions'][0]['field']) == "DATE_FORMAT((node__field_starts_ends.field_starts_ends_value + INTERVAL 28800 SECOND), '%Y%m') = :node__field_starts_ends_field_starts_ends_value_year_month") {
        $query->where[0]['conditions'][0]['field'] = preg_replace("/ = :/", " <= :", $query->where[0]['conditions'][0]['field']);
      }
      if (trim($query->where[0]['conditions'][1]['field']) == "DATE_FORMAT((node__field_starts_ends.field_starts_ends_end_value + INTERVAL 28800 SECOND), '%Y%m') = :node__field_starts_ends_field_starts_ends_end_value_year_month") {
        $query->where[0]['conditions'][1]['field'] = preg_replace("/ = :/", " >= :", $query->where[0]['conditions'][1]['field']);
      }
    }
  }
      */

  // Set the next event
  if ($view->id() == 'events' && $view->current_display == 'block_1') {
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node instanceof \Drupal\node\NodeInterface) {
      $nid = $node->id();
      foreach ($query->where as &$condition_group) {
        array_push($condition_group['conditions'], [
          'field' => 'node__field_starts_ends.field_starts_ends_value > ' . ':field_starts_ends',
          'value' => ['field_starts_ends' => $node->field_starts_ends->value],
          'operator' => 'formula',
        ]);
      }
    }
  }

  // Set date conditions for Blog newscatmonth view.
  if ($view->storage->get('id') === 'blog' && $view->current_display === 'newscatmonth') {
    if (isset($query->where[0])) {
      if (trim($query->where[0]['conditions'][0]['field']) == "DATE_FORMAT((node__field_starts_ends.field_starts_ends_value + INTERVAL 28800 SECOND), '%Y%m') = :node__field_starts_ends_field_starts_ends_value_year_month1") {
        $query->where[0]['conditions'][0]['field'] = preg_replace("/ = :/", " <= :", $query->where[0]['conditions'][0]['field']);
      }
      if (trim($query->where[0]['conditions'][1]['field']) == "DATE_FORMAT((node__field_starts_ends.field_starts_ends_end_value + INTERVAL 28800 SECOND), '%Y%m') = :node__field_starts_ends_field_starts_ends_end_value_year_month") {
        $query->where[0]['conditions'][1]['field'] = preg_replace("/ = :/", " >= :", $query->where[0]['conditions'][1]['field']);
      }
    }
  }

  // Banner filtering.
  if ($view->id() == 'banners'){
    $internal_path = \Drupal::service('path.current')->getPath();
    $current_path = \Drupal::service('path_alias.manager')->getAliasByPath($internal_path);
    if($current_path == "/frontpage") $current_path = "/";
    foreach ($query->where as &$condition_group) {
      foreach ($condition_group['conditions'] as &$condition) {
        if ($condition['field'] == 'node__field_banner_page.field_banner_page_uri') {
          $condition = [
            'field' => 'node__field_banner_page.field_banner_page_uri',
            'value' => 'internal:'.$current_path,
            'operator' => 'LIKE',
          ];
        }
      }
    }
  }

  // Stores filtering - Featured logos
  if ($view->id() === 'stores' && ($view->current_display === 'featured' || $view->current_display === 'front_stores')){
    $internal_path = \Drupal::service('path.current')->getPath();
    $current_path = \Drupal::service('path_alias.manager')->getAliasByPath($internal_path);
    if($current_path == "/frontpage") $current_path = "/";
    foreach ($query->where as &$condition_group) {
      foreach ($condition_group['conditions'] as &$condition) {
        if ($condition['field'] == 'node__field_banner_page.field_banner_page_uri') {
          $condition = [
            'field' => 'node__field_banner_page.field_banner_page_uri',
            'value' => 'internal:'.$current_path,
            'operator' => 'LIKE',
          ];
        }
      }
    }
  }

  // Exclude other views results.
  if ($view->id() === 'deals'){
    if($view->current_display === 'category' || $view->current_display === 'tag' || $view->current_display === 'tag_blog'){

      // Get Popular NIDs from other View
      $popular_nids = [];
      $result = views_get_view_result('deals', 'category_popular');
      foreach($result as $row) {
        $popular_nids[] = $row->nid;
      }

      foreach ($query->where as &$condition_group) {
        foreach ($condition_group['conditions'] as &$condition) {
          if ($condition['field'] == 'node_field_data.nid' && !empty($popular_nids)) {
            $condition = [
              'field' => 'node_field_data.nid',
              'value' => $popular_nids,
              'operator' => 'not in',
            ];
          }
        }
      }

    }
  }

}

/**
 * Implements hook_preprocess_HOOK().
 */
function mnet_extra_preprocess_views_view__events__page_1(&$variables) {

  $months = [];
  $current_month_int = (int)date('m');

  $dates[] = date('Ym', mktime(0, 0, 0, $current_month_int-1, 1));
  $months[] = date('F', mktime(0, 0, 0, $current_month_int-1, 1));
  $month_m[] = date('m', mktime(0, 0, 0, $current_month_int-1, 1));
  $years[] = date('Y', mktime(0, 0, 0, $current_month_int-1, 1));

  $dates[] = date('Ym', mktime(0, 0, 0, $current_month_int, 1));
  $months[] = date('F', mktime(0, 0, 0, $current_month_int, 1));
  $month_m[] = date('m', mktime(0, 0, 0, $current_month_int, 1));
  $years[] = date('Y', mktime(0, 0, 0, $current_month_int, 1));

  $variables['dates'] = $dates;
  $variables['months'] = $months;
  $variables['month_m'] = $month_m;
  $variables['years'] = $years;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mnet_extra_preprocess_views_view__events__page_2(&$variables) {
  $arg = $variables['view']->args[0];
  $current_year = substr($arg, 0, 4);
  $current_month = substr($arg, 4, 5);
  $current_month_name = date('F', mktime(0, 0, 0, $current_month, 1));

  $months = [];
  $current_month_int = (int)$current_month;

  $dates[] = date('Ym', mktime(0, 0, 0, $current_month_int-1, 1, $current_year));
  $months[] = date('F', mktime(0, 0, 0, $current_month_int-1, 1, $current_year));
  $month_m[] = date('m', mktime(0, 0, 0, $current_month_int-1, 1, $current_year));
  $years[] = date('Y', mktime(0, 0, 0, $current_month_int-1, 1, $current_year));

  $dates[] = date('Ym', mktime(0, 0, 0, $current_month_int+1, 1, $current_year));
  $months[] = date('F', mktime(0, 0, 0, $current_month_int+1, 1, $current_year));
  $month_m[] = date('m', mktime(0, 0, 0, $current_month_int+1, 1, $current_year));
  $years[] = date('Y', mktime(0, 0, 0, $current_month_int+1, 1, $current_year));


  $variables['dates'] = $dates;
  $variables['months'] = $months;
  $variables['month_m'] = $month_m;
  $variables['years'] = $years;
  $variables['current_year'] = $current_year;
  $variables['current_month'] = $current_month;
  $variables['current_month_name'] = $current_month_name;

}

/**
 * Implements hook_preprocess_HOOK().
 */
function mnet_extra_preprocess_views_view__deals__page_1(&$variables) {
  if(isset($_GET['expired'])){
    $variables['get']['expired'] = $_GET['expired'];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mnet_extra_preprocess_region__footer(&$variables) {
  $menus = Menu::loadMultiple();
  $variables['menu_names'] = [];
  foreach ($menus as $key => $menu) {
    $variables['menu_names'][$key] = $menu->get('label');
  }
}

/**
* Implements hook_preprocess_comment().
*/
function mnet_extra_preprocess_comment(&$variables) {
  $comment = $variables['elements']['#comment'];
  $variables['ago'] = t('@time ago', array('@time' => \Drupal::service('date.formatter')->formatTimeDiffSince($comment->getCreatedTime())));
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mnet_extra_preprocess_views_view__user_comments(&$variables) {
  $path = \Drupal::request()->getpathInfo();
  $arg  = explode('/',$path);
  if(is_numeric($arg[2])){
    $account = \Drupal::entityTypeManager()->getStorage('user')->load($arg[2]);
    $variables['username'] = $account->name->value;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mnet_extra_preprocess_views_view__user_deals(&$variables) {
  $path = \Drupal::request()->getpathInfo();
  $arg  = explode('/',$path);
  if(is_numeric($arg[2])){
    $account = \Drupal::entityTypeManager()->getStorage('user')->load($arg[2]);
    $variables['username'] = $account->name->value;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mnet_extra_preprocess_views_view__user_articles(&$variables) {
  $path = \Drupal::request()->getpathInfo();
  $arg  = explode('/',$path);
  if(is_numeric($arg[2])){
    $account = \Drupal::entityTypeManager()->getStorage('user')->load($arg[2]);
    $variables['username'] = $account->name->value;
  }
}

/**
 * Implements hook_theme_suggestions_form().
 */
function mnet_extra_theme_suggestions_form($variables) {
  // Specific templates for contact forms.
  if(isset($variables['element']['#theme'][0])){
    $suggestions[] = 'form__' . $variables['element']['#theme'][0]; // Machine name of form.
  }
  if(isset($variables['element']['#entity_type']) && $variables['element']['#type'] == 'form' && $variables['element']['#entity_type'] == 'node'){
    $suggestions[] = 'form__' . 'node_form';
  }
  return $suggestions;
}

/**
 * Implements hook_form_alter().
 */
function mnet_extra_form_contact_message_feedback_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form['name']['#title'] = "Name";
  $form['name']['#attributes']['placeholder'][] = "Your name";
  $form['mail']['#title'] = "Email";
  $form['mail']['#attributes']['placeholder'][] = "Your email address";
  $form['actions']['submit']['#value'] = "Submit";
  $form['actions']['preview']['#access'] = FALSE;
}



function mnet_extra_preprocess_item_list(&$variables) {
  $variables['keyword'] = \Drupal::request()->query->get('keys');
}

/**
 * Implements hook_form_alter().
 */
function mnet_extra_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  
  if ($form_id == 'node_blog_edit_form' || $form_id == 'node_blog_form') {
    $member = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id())->hasRole('member');
    $pro_member = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id())->hasRole('pro_member');
    $partner = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id())->hasRole('partner');
    if($member === TRUE || $pro_member === TRUE || $partner === TRUE){
      $form['field_stores']['#access'] = FALSE;
    }
  }
}


function numToKs($number) {
  if ($number >= 1000) {
      return number_format(($number / 1000), 1) . 'k';
  } else {
      return $number;
  }
}

/**
 * Implements hook_token_info().
 */
function mnet_extra_token_info() {
  $info = [];
  $info['types']['mnet_token_group'] = ['name' => t('Custom Group'), 'description' => t('Custom Group')];
  $info['tokens']['mnet_token_group']['term_name']['name'] = 'term_name';
  $info['tokens']['mnet_token_group']['term_name']['desctiption'] = 'A token to extract term name from Views argument.';
  $info['tokens']['mnet_token_group']['user_name']['name'] = 'user_name';
  $info['tokens']['mnet_token_group']['user_name']['desctiption'] = 'A token to extract user name from Views argument.';
  $info['tokens']['mnet_token_group']['node_title']['name'] = 'node_title';
  $info['tokens']['mnet_token_group']['node_title']['desctiption'] = 'A token to extract node title from Views argument.';
  return $info;
}

/**
 * Implements hook_tokens().
 */
function  mnet_extra_tokens($type, $tokens, array $data, array $options, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];
  if ($type == 'mnet_token_group' && !empty($tokens)) {    
    foreach ($tokens as $name => $original) {
      // Find the desired token by name.
      switch ($name) {
        case 'term_name':
          $this_label = "";
          if(isset($data['view']->build_info['substitutions']['{{ arguments.tid }}'])){
            $tid = $data['view']->build_info['substitutions']['{{ arguments.tid }}'];
            if(is_numeric($tid)){
              $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($tid);
              $this_label = $term->label();
            }
            else{
              $this_label = $tid;
            }
          }
          $replacements[$original] = $this_label;
          break;

        case 'user_name':
          $this_label = "";
          if(isset($data['view']->build_info['substitutions']['{{ arguments.uid }}'])){
            $uid = $data['view']->build_info['substitutions']['{{ arguments.uid }}'];
            $account = \Drupal\user\Entity\User::load($uid);
            $this_label = $account->get('name')->value;
          }
          $replacements[$original] = $this_label;
          break;

        case 'node_title':
          $this_label = "";
          if(isset($data['view']->build_info['substitutions']['{{ arguments.nid }}'])){
            $this_label = $data['view']->build_info['substitutions']['{{ arguments.nid }}'];
          }
          $replacements[$original] = $this_label;
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function mnet_extra_node_presave(\Drupal\node\NodeInterface $node) {
  if(isset($node->field_thumbnail) && empty($node->field_thumbnail->alt)) {
    $node->field_thumbnail->alt = $node->getTitle();
  }
  if(isset($node->field_image) && empty($node->field_image->alt)) {
    $node->field_image->alt = $node->getTitle();
  }
  if(isset($node->field_store_logo) && empty($node->field_store_logo->alt)) {
    $node->field_store_logo->alt = $node->getTitle();
  }
}


/**
  * @implements hook_views_pre_view().
  *
  */
function mnet_extra_views_pre_view(\Drupal\views\ViewExecutable $view, $display_id, array &$args) {
  // View that is loaded in code to get NIDs for exclusion
  $featured_view_name = 'deals';
  $featured_view_display = 'popular_front';
  // View that is being deduped
  $automated_view_name = 'deals';
  $automated_view_display = 'page_1';

  if ($view->id() == $automated_view_name && $display_id == $automated_view_display) {
    $node_ids = dedup_views_nids_for_exlusion($featured_view_name, $featured_view_display);
    if (!empty($node_ids)) {
      // $args[] are Views Arguments for the Contextual Filter
      // A contectual filter must be added and configured to your view
      $args[] = $node_ids;
    }
  }
}

function dedup_views_nids_for_exlusion($view_name, $view_display) {
  $nids = [];
  $results = [];

  // Load the view
  $view = \Drupal\views\Views::getView($view_name);
  $view->setDisplay($view_display);
  $view->execute();
  $results = $view->result;

  if (count($results) > 0) {
    foreach ($results as $result) {
      if (isset($result->nid)) {
        $nids[] = $result->nid;
      }
    }

    // Return $nids in a format we need (comma or plus seperated)
    // This is the same format the Views contextual filter would expect if
    // You manually typed in a list of NIDs
    return implode('+', $nids);
  }
}
